
package com.kong.eos.plugin.transformation.datetime

import java.io.{Serializable => JSerializable}
import java.text.SimpleDateFormat
import java.util.{Date, TimeZone}

import com.github.nscala_time.time.Imports._
import com.kong.eos.sdk.pipeline.transformation.{Parser, WhenError}
import com.kong.eos.sdk.properties.ValidatingPropertyMap._
import com.kong.eos.sdk.utils.AggregationTime._
import org.apache.spark.sql.Row
import org.apache.spark.sql.types.StructType
import org.joda.time.format.{DateTimeFormatter, ISODateTimeFormat}

import scala.util.{Failure, Success, Try}

class DateTimeParser(order: Integer,
                     inputField: Option[String],
                     outputFields: Seq[String],
                     schema: StructType,
                     properties: Map[String, JSerializable])
  extends Parser(order, inputField, outputFields, schema, properties) {

  private val Formats = properties.getString("inputFormat", None)
  private val GranularityProperty = properties.getString(GranularityPropertyName, None)

  //scalastyle:off
  override def parse(row: Row): Seq[Row] = {
    val inputValue = Option(row.get(inputFieldIndex))
    val newData = Try {
      outputFields.map(outputField => {
        val outputSchemaValid = outputFieldsSchema.find(field => field.name == outputField)
        outputSchemaValid match {
          case Some(outSchema) =>
            if (extractAutoGeneratedOption) parseToOutputType(outSchema, applyGranularity(new DateTime()))
            else {
              inputValue match {
                case Some(value: DateTime) =>
                  parseToOutputType(outSchema, applyGranularity(value))
                case Some(value: String) =>
                  if (value.isEmpty)
                    returnWhenError(new IllegalStateException(
                      s"Impossible to parse because value for field: ${outSchema.name} is empty"))
                  else parseToOutputType(outSchema, applyGranularity(parseDate(value)))
                case Some(value: Array[Byte]) =>
                  val valueCasted = new Predef.String(value)
                  if (value.isEmpty)
                    returnWhenError(new IllegalStateException(
                      s"Impossible to parse because value for field: ${outSchema.name} is empty"))
                  else parseToOutputType(outSchema, applyGranularity(parseDate(valueCasted)))
                case Some(value) =>
                  parseToOutputType(outSchema, applyGranularity(parseDate(value)))
                case None =>
                  returnWhenError(new IllegalStateException(
                    s"Impossible to parse because value for field: ${outSchema.name} is empty"))
              }
            }
          case None =>
            returnWhenError(new IllegalStateException(s"Impossible to parse outputField: $outputField in the schema"))
        }
      })
    }

    returnData(newData, removeInputField(row))
  }

  //scalastyle:on

  private def extractFormatter(formats: Option[String]): Option[Either[DateTimeFormatter, String]] = {
    formats match {
      case Some(format) =>
        format match {
          case "unix" => Some(Right("unix"))
          case "unixMillis" => Some(Right("unixMillis"))
          case "autoGenerated" => Some(Right("autoGenerated"))
          case "hive" => Some(Right("hive"))
          case _ => Some(Left(DateTimeParser.FormatMethods(format).invoke(None).asInstanceOf[DateTimeFormatter]))
        }
      case None => None
    }
  }

  private def extractAutoGeneratedOption: Boolean =
    extractFormatter(Formats) match {
      case Some(Right("unix")) => false
      case Some(Right("unixMillis")) => false
      case Some(Right("hive")) => false
      case Some(Left(formatter)) => false
      case _ => true
    }

  private def parseDate(inputValue: Any): DateTime = {
    extractFormatter(Formats) match {
      case Some(Right("unix")) =>
        new DateTime(inputValue.toString.toLong * 1000L)
      case Some(Right("unixMillis")) =>
        new DateTime(inputValue.toString.toLong)
      case Some(Right("hive")) =>
        new DateTime(getDateFromHiveFormat(inputValue.toString))
      case Some(Left(formatter)) =>
        formatter.parseDateTime(inputValue.toString)
      case _ =>
        throw new IllegalStateException(s"The format is not valid")
    }
  }

  private def applyGranularity(inputValue: DateTime): Long =
    GranularityProperty.fold(inputValue.getMillis) { granularity => truncateDate(inputValue, granularity) }

  private def getDateFromHiveFormat(hiveFormatDate: String): Date = {
    val sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
    sdf.setTimeZone(TimeZone.getTimeZone("UTC"))
    sdf.parse(hiveFormatDate)
  }
}

object DateTimeParser {

  val FormatMethods = classOf[ISODateTimeFormat].getMethods.toSeq.map(x => (x.getName, x)).toMap
}